#!/bin/bash

DB_FILE="$HOME/.secrets/.secrets.db"
KEY_FILE="$HOME/.secrets/.secrets_key"

# Generate or load encryption key
load_key() {
    if [ ! -f "$KEY_FILE" ]; then
        head -c 32 /dev/urandom > "$KEY_FILE"
        chmod 600 "$KEY_FILE"  # Restrict permissions
    fi
    cat "$KEY_FILE"
}

ENCRYPTION_KEY=$(load_key)

# Encrypt data
encrypt() {
    echo -n "$1" | openssl enc -aes-256-cbc -pbkdf2 -a -salt -pass file:"$KEY_FILE" 2>/dev/null
}

# Decrypt data
decrypt() {
    echo "$1" | openssl enc -aes-256-cbc -pbkdf2 -d -a -salt -pass file:"$KEY_FILE" 2>/dev/null
}

# Initialize database
init_db() {
    if [ ! -f "$DB_FILE" ]; then
        sqlite3 "$DB_FILE" "CREATE TABLE secrets (key TEXT PRIMARY KEY, value TEXT);"
    fi
}

init_db

# Store a secret
store_secret() {
    local key="$1"
    local value="$2"
    local encrypted_value=$(encrypt "$value" | tr -d '\n')  # Remove newlines
    sqlite3 "$DB_FILE" "INSERT OR REPLACE INTO secrets (key, value) VALUES ('$key', '$encrypted_value');"
    echo "Secret stored successfully!"
}

# Retrieve and copy secret
retrieve_secret() {
    local keys=$(sqlite3 "$DB_FILE" "SELECT key FROM secrets;")
    if [ -z "$keys" ]; then
        echo "No secrets stored yet."
        return
    fi

    local selected_key=$(echo "$keys" | fzf)
    if [ -z "$selected_key" ]; then
        return
    fi

    local encrypted_value=$(sqlite3 "$DB_FILE" "SELECT value FROM secrets WHERE key='$selected_key';")
    if [ -z "$encrypted_value" ]; then
        echo "Error: No encrypted value found for $selected_key"
        return
    fi

    local decrypted_value=$(decrypt "$encrypted_value")
    if [ -z "$decrypted_value" ]; then
        echo "Error: Failed to decrypt the secret."
        return
    fi

    echo -n "$decrypted_value" | xclip -selection clipboard
    echo "Secret for $selected_key copied to clipboard!"
}

# Delete a secret
delete_secret() {
    local key="$1"
    sqlite3 "$DB_FILE" "DELETE FROM secrets WHERE key='$key';"
    echo "Secret for $key deleted successfully!"
}

# Command-line arguments
while [[ "$#" -gt 0 ]]; do
    case "$1" in
        --key)
            KEY="$2"
            shift 2
            ;;
        --value)
            VALUE="$2"
            shift 2
            ;;
        delete)
            DELETE=true
            shift
            ;;
        *)
            echo "Invalid argument: $1"
            exit 1
            ;;
    esac
done

if [ -n "$DELETE" ] && [ -n "$KEY" ]; then
    delete_secret "$KEY"
elif [ -n "$KEY" ] && [ -n "$VALUE" ]; then
    store_secret "$KEY" "$VALUE"
elif [ -z "$KEY" ] && [ -z "$VALUE" ]; then
    retrieve_secret
else
    echo "Usage: secret --key <KEY> --value <VALUE> to store, 'secret' to retrieve, or 'secret delete --key <KEY>' to delete."
fi
